# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_q9CHVJ2iOSSdnHdO_TGZLQ40ElCRvM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
!pip install streamlit
import streamlit as st

# Load dataset
train_data = pd.read_csv("/content/Titanic_train.csv")
test_data = pd.read_csv("/content/Titanic_test.csv")

# Exploratory Data Analysis (EDA)
train_data.info()

train_data.describe()

sns.histplot(train_data['Age'].dropna(), kde=True)
plt.show()

sns.boxplot(x=train_data['Pclass'], y=train_data['Fare'])
plt.title("Fare Distribution by Class")
plt.show()

sns.pairplot(train_data[['Age', 'Fare', 'SibSp', 'Parch', 'Survived']])
plt.show()

# Data Preprocessing
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)

train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)
test_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True)

label_enc = LabelEncoder()
for col in ['Sex', 'Embarked']:
    train_data[col] = label_enc.fit_transform(train_data[col])
    test_data[col] = label_enc.transform(test_data[col])

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = train_data[features]
y = train_data['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Building
model = LogisticRegression()
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
y_pred_prob = model.predict_proba(X_test)[:, 1]

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_pred_prob))

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_pred_prob)
plt.plot(fpr, tpr, label="Logistic Regression")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()



#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import pandas as pd
# import numpy as np
# import pickle
# import streamlit as st
# from sklearn.preprocessing import StandardScaler, LabelEncoder
# from sklearn.linear_model import LogisticRegression
# 
# # Load the trained model and scaler
# model = pickle.load(open("logistic_model.pkl", "rb"))
# scaler = pickle.load(open("scaler.pkl", "rb"))
# 
# st.title("Titanic Survival Prediction")
# 
# # User input fields
# pclass = st.selectbox("Passenger Class", [1, 2, 3])
# sex = st.radio("Sex", ['Male', 'Female'])
# age = st.slider("Age", 0, 100, 30)
# sibsp = st.number_input("Siblings/Spouses Aboard", 0, 10, 0)
# parch = st.number_input("Parents/Children Aboard", 0, 10, 0)
# fare = st.number_input("Fare", 0.0, 500.0, 32.0)
# embarked = st.selectbox("Embarked", ['C', 'Q', 'S'])
# 
# # Encode categorical values
# sex = 1 if sex == 'Male' else 0
# embarked = {'C': 0, 'Q': 1, 'S': 2}[embarked]
# 
# # Prepare input data
# input_data = np.array([[pclass, sex, age, sibsp, parch, fare, embarked]])
# input_data = scaler.transform(input_data)
# 
# if st.button("Predict Survival"):
#     prediction = model.predict(input_data)
#     result = "Survived" if prediction[0] == 1 else "Did not survive"
#     st.write(f"Prediction: {result}")
#

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression

# Load dataset
train_data = pd.read_csv("/content/Titanic_train.csv")

# Data Preprocessing
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)

label_enc = LabelEncoder()
for col in ['Sex', 'Embarked']:
    train_data[col] = label_enc.fit_transform(train_data[col])

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = train_data[features]
y = train_data['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)

# Train logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Save the model and scaler
pickle.dump(model, open("logistic_model.pkl", "wb"))
pickle.dump(scaler, open("scaler.pkl", "wb"))

!streamlit run app.py & npx localtunnel --port 8501















